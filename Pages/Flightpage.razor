@page "/flightpage"
@using Microsoft.Maui.Storage
@using System.IO
@using System.Text.Json
@using BlazorHybridApp2.Data

<style>
    body {
        font-size: 9px;
    }
    label {
        width: 200px;
        display: inline-block;
    }

    input {
        width: 200px;
    }

    .full-width {
        width: 100%;
    }
</style>

<h5>Flight Finder</h5>

<div>
    <label>From:</label>
    <label>To:</label>
    <label>Day:</label>
</div>

<div>
    <input placeholder="Any" @bind="from" />
    <input placeholder="Any" @bind="to" />
    <input placeholder="Any" @bind="day" />

    <button class="btn btn-primary" @onclick="FindFlights">
        Find Flights
    </button>
</div>
<h5>Flights</h5>
<div>
    <input class="full-width" placeholder="Loading" @bind="flightfound" />
</div>

<h5>Reserve 
    @if (!string.IsNullOrEmpty(flightfound)) 
{
  <div style="color: red;">Enter Name and Citizenship to book</div>
}</h5>
<div>Flight code</div>
<div>
    <input class="full-width" readonly value="@flight_code" />
</div>

<div>Airline</div>
<div>
    <input class="full-width" readonly value="@airline" />
</div>

<div>Day</div>
<div>
    <input class="full-width" readonly value="@flight_day" />
</div>

<div>Time</div>
<div>
    <input class="full-width" readonly value="@flight_time" />
</div>

<div>Cost</div>
<div>
    <input class="full-width" readonly value="@cost" />
</div>
<div>Name</div>
<div>
    <input class="full-width" placeholder="" @bind="name" />
</div>
<div>Citizenship</div>
<div>
    <input class="full-width" placeholder="" @bind="citizenship" />
</div>
<div style="color: red;">
    <button class="btn btn-primary" @onclick="TryMakeReservation">
        Reserve
    </button>
    @if (displayReservationCode)
    {
        <h3>Reservation Code: @reservationCode</h3>
    }
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div style="color: red;">@errorMessage</div>
    }
</div>

@code {
    private string from;
    private string to;
    private string day;
    private string flightfound;
    private string flight_code;
    private string flight_time;
    private string airline;
    private string flight_day;
    private string cost;
    private string name;
    private string citizenship;
    private Flight selectedFlight;
    private List<Reservation> reservations;
    private string reservationCode;
    private bool displayReservationCode;

    private string errorMessage = "";
    private ReservationManager reservationManager;

    private void FindFlights()
    {
        var foundFlights = flights.Where(f =>
            (string.IsNullOrEmpty(from) || f.From.Equals(from, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(to) || f.To.Equals(to, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(day) || f.WeekDay.Equals(day, StringComparison.OrdinalIgnoreCase))
        ).ToList();

        if (foundFlights.Any())
        {
            var flight = foundFlights.First();
            selectedFlight = foundFlights.First();
            flightfound = flight.ToString();
            flight_code = flight.Code;
            airline = flight.AirlineCode;
            flight_day = flight.WeekDay;
            flight_time = flight.Time;
            cost = flight.CostPerSeat.ToString();

        }
        else
        {
            flightfound = "No flights found.";
        }
    }

    private string csvPath = "./flights.csv";

    private void MakeReservation()
    {
        if (string.IsNullOrEmpty(name))
        {
            throw new MakeReservationException("Name cannot be empty or null.");
        }

        if (string.IsNullOrEmpty(citizenship))
        {
            throw new MakeReservationException("Citizenship cannot be empty or null.");
        }

        var flight = flights.FirstOrDefault(f => f.Code == flight_code);

        if (flight == null)
        {
            throw new MakeReservationException("Flight code is not valid.");
        }

        var existingReservation = reservations.FirstOrDefault(r => r.Flight.Code == flight_code && r.Name == name && r.Citizenship == citizenship);

        if (existingReservation != null)
        {
            throw new MakeReservationException("This reservation already exists.");
        }

        if (flight.TotalSeats <= 0)
        {
            throw new MakeReservationException("The flight is completely booked.");
        }

        var reservation = new Reservation(flight, name, citizenship);
        reservations.Add(reservation);
        reservationCode = reservation.Code;
        displayReservationCode = true;
        reservationManager.Save();

    }

    List<Flight> flights;

    protected override async Task OnInitializedAsync()
    {
        flights = await LoadFlightsFromCsvAsync(csvPath);
        reservationManager = new ReservationManager();  // Instantiate ReservationManager first
        reservations = reservationManager.Reservations as List<Reservation>; // Assign Reservations after instantiation

    }

    private async Task<List<Flight>> LoadFlightsFromCsvAsync(string filePath)
    {
        List<Flight> flights = new List<Flight>();

        using (var reader = new StreamReader(csvPath))
        {
            while (!reader.EndOfStream)
            {
                var line = reader.ReadLine();
                var values = line.Split(',');

                flights.Add(new Flight(
                  values[0],
                  values[1],
                  values[2],
                  values[3],
                  values[4],
                  values[5],
                  int.Parse(values[6]),
                  decimal.Parse(values[7])
                ));
            }
        }

        return flights;

    }
    private async Task TryMakeReservation()
    {
        errorMessage = "";  
        try
        {
            MakeReservation();
        }
        catch (MakeReservationException e)
        {
            errorMessage = e.Message;
        }
    }
}